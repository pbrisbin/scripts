#!/bin/bash
#
# pbrisbin 2009
#
# Description:
#
# Somewhat automate the handling of aur packages where you control the
# source files.
#
# How it works:
#
# Place a file in some known directory* for each package you manage, name
# this file the name of the package.
#
# That file will be sourced by this script if that package is passed as
# an argument. The sourcing should define two variables and two
# functions:
#
#   source_files     : the path to the directory that will ultimately be
#                      tarred and uploaded to the AUR.
#
#   ignore_files     : a bash array of [relative] file names that are in
#                      $source_files/ but should be ignored. spaces are
#                      not supported at this time.
#
#   pre_edit_hook()  : this function will be called before the PKGBUILD
#                      is presented for editing. Some useful things it
#                      might do are move around source files and update
#                      md5sums.
#
#   post_edit_hook() : this function will be called after the PKGBUILD
#                      has been edited, but before the files are tarred
#                      and uploaded. Some useful things it might do are
#                      remove ./{pkg,src} files created during the
#                      md5sum update or a test packaging run.
#
# When defining the functions, you can use display(), warn(), and
# errorout() as needed. Your functions should return 1 for failure and 0
# for success.
#
# At this time, you can assume that the pre and post hooks will be run
# from within the same directory as the PKGBUILD.
#
# Most errors just result in ending the processing of this argument.
# Commands that fail should report their own errors.
#
# *The "known directory" is defaulted in-script for my usage, it can be
# changed at runtime using the -b or --build_files options
#
###

# help message
message()  { 
  cat << EOF
  usage: upload [ -k ] [ -b <dir> ] <package> ...
    options:
      -k, --keep                don't discard the taurball after uploading
      -b, --build-files         source build files from <dir>

EOF
  
  exit 1
}

# std output commands
display()  { echo "$*";                      }
warn()     { echo "warning: $*" >&2;         }
errorout() { echo "error: $*"   >&2; exit 1; }

# prompt with Y default
prompt() {
  echo
  read -p "$*? [Y/n] " a

  case "${a:-y}" in
    y|Y) return 0 ;;
    q|Q) exit 1   ;;
    *)   return 1 ;;
  esac
}

make_filename() {
  local pkgbuild="$1"

  (
    unset -v pkgname
    unset -v pkgver
    unset -v pkgrel

    . "$pkgbuild" || return 1

    echo "/tmp/$pkgname-$pkgver-$pkgrel.src.tar.gz"
    return 0
  )
}

process_pkg() {
  local pkg="$1" fn taur

  # ensure no cross-over
  unset -v source_files
  unset -v ignore_files
  unset -f pre_edit_hook
  unset -f post_edit_hook

  # source for new values
  . "$build_files/$pkg" || return 1

  # validate build file
  [[ -n "$source_files" ]] || return 1
  type -p pre_edit_hook    || return 1
  type -p post_edit_hook   || return 1

  # hooks and editing
  pushd "$source_files" >/dev/null || return 1
  pre_edit_hook                    || return 1
  ${EDITOR:-vi} ./PKGBUILD         || return 1
  post_edit_hook                   || return 1
  popd >/dev/null                  || return 1

  # source the pkgbuild so we can build the right filename. we don't use
  # makepkg --source b/c we want to ignore files.
  read -r taur < <(make_filename "$source_files/PKGBUILD") || return 1

  # tar and upload
  create_taurball "$source_files" "$taur" || return 1
  upload_taurball "$taur"                 || return 1

  return 0
}

create_taurball() {
  local dir="$1" taur="$2"

  # display contents for review
  ls ${ignore_files[@]/#/--ignore } -l -a "$dir"

  prompt "create taurball from $dir"                             || return 1
  pushd "${dir%/*}" >/dev/null                                   || return 1
  tar cvpzf "$taur" ${ignore_files[@]/#/--exclude=} "${dir##*/}" || return 1
  popd >/dev/null                                                || return 1

  return 0
}

# feel free to edit this if you have some other preferred way of
# uploading to the AUR
upload_taurball() {
  local taur="$1"

  prompt "upload $taur" || return 1

  # my way: using aurploader with stored password
  local aurpass="$HOME/.aurploader_pass"
  [[ -f "$aurpass" ]] || errorout "$aurpass: file not found."
  aurploader -r -l "$aurpass" "$taur" || return 1

  # cleanup?
  if $keep; then
    display "$taur: left in place"
  else
    rm -v "$taur" || return 1
  fi

  return 0
}

parse_options() {
  # set defaults
  args=()
  keep=false
  build_files="$HOME/.aur_build_files"

  # getopts
  while [[ -n "$1" ]]; do
    case "$1" in
      -b|--build-files) shift; build_files="$1" ;;
      -k|--keep)        keep=true               ;;
      --)               break                   ;;
      -*)               message                 ;;
      *)                args+=( "$1" )          ;;
    esac
    shift
  done

  # args after break
  [[ -n "$*" ]] && args+=( "$@" )

  # no args?
  [[ "${#args[@]}" -eq 0 ]] && message
}

parse_options "$@"

for pkg in "${args[@]}"; do
  if ! process_pkg "$pkg"; then
    warn "$pkg: processing stopped"
  fi
done
