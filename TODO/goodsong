#!/bin/bash
#
# goodsong: maintain a list of good songs.
#
# pbrisbin 2009, 2010, 2011
#
# requires playlist_directory and music_directory be set in mpd.conf
#
# contributors:
#   Tom Vincent <http://www.tlvince.com/contact/>
#   Christian
#
###

errorout() { echo "error: $*" >&2; exit 1; }

message() {
  cat << EOF
  usage: goodsong [ -p | -ls ]

    options:
          -p,--play   play a random good song
          -ls,--list  print your list with music dir prepended

          none        note the currently playing song as good

EOF
  exit 1
}

mpd_prop() {
  local value

  # note: error handling left to caller
  read -r value < <(sed -r '/^'"$1"' *(\"|'\''|)([^\1]*)\1/!d; s//\2/g' "$mpd_config")
  echo "${value/\~/$HOME}"
}

# todo: add --config option
set_config() {
  unset mpd_config
  
  # mpd.conf passed on commandline
  read -r mpd_config < <(pgrep -fl $(which --skip-tilde mpd)\  | awk '{print $3}')
  [[ -n "$mpd_config" ]] && return 0

  mpd_config="$HOME/.mpd/mpd.conf"
  [[ -n "$mpd_config" ]] && return 0

  mpd_config='/etc/mpd.conf'
  [[ -n "$mpd_config" ]] && return 0

  return 1
}

# todo: add --playlist option
set_playlist() {
  unset playlist_file
  local playlist_directory

  read -r playlist_directory < <(mpd_prop 'playlist_directory')
  [[ -z "$playlist_directory" ]] && return 1

  # return exit status from touch call
  playlist_file="$playlist_directory/goodsongs.m3u"
  touch "$playlist_file" &>/dev/null
}

play_random() {
  local track position
  
  read -r track < <(sort -R "$playlist_file")
  [[ -z "$track" ]] && return 1

  # look for it in current playlist
  read -r position < <(mpc --format '%position% %file%' playlist |\
    awk "/[0-9]* ${track//\//\\/}$/"'{print $1}')

  if [[ -z "$position" ]]; then
    mpc -q add "$track" # add it
    read -r position <(mpc playlist | wc -l)
  fi

  [[ -n "$position" ]] && mpc -q play "$position"

  exit $? # non-zero on empty var or mpc error
}

print_list() {
  local music_directory
  
  read -r music_directory < <(mpd_prop 'music_directory')
  [[ -n "$music_directory" ]] && sed "s|^|$music_directory/|g" "$playlist_file"

  exit $? # non-zero on empty var or sed error
}

which mpc &>/dev/null || errorout 'mpc binary required'
set_config            || errorout 'unable to locate mpd config file'
set_playlist          || errorout 'unable to access a playlist file'

if [[ -n "$1" ]]; then
  case "$1" in
    -p|--play)  play_random ;;
    -ls|--list) print_list  ;;
    *)          message     ;;
  esac
fi

# default action, note song as good
read -r song < <(mpc --format %file%)
[[ -n "$song" ]] && \
  { grep -Fqx "$song" "$playlist_file" || echo "$song" >> "$playlist_file"; }

exit $? # non-zero on empty var or echo error
