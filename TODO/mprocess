#!/bin/bash
#
# pbrisbin 2010
#
# take a folder of recently downloaded music and process it into a
# folder structure/naming convention that suits my OCD-ness
#
# this script is fairly atomic: either all tags are read successfully,
# and the music is placed in 'original' and 'sorted' directories then
# moved properly to your music folder, or _nothing_ happens.
#
# at least that's the idea...
#
###

# utilities
errorout() { echo "error: $*" >&2; exit 1; }

warn() { echo "warning: $*" >&2; }

message() { echo 'usage: mprocess <directory> ...'; exit 1; }

prompt() {
  read -p "$*? [Y/n] " a

  case "${a:-y}" in
    y|Y) return 0 ;;
    *)   return 1 ;;
  esac
}

# format audiotag output into a series of artist=, album=, etc lines;
# use eval on these lines to set actual in-script variables
fill_vars_at() {
  local output

  # blank the global vars
  artist=''
  album=''
  title=''
  tracknum=''
  tracknumber=''

  # set the global vars
  eval $(
    while read -r; do
      output="${REPLY/=== /}"
      output="${output/: /=\"}"

      echo "${output,,}\""
    done < <(audiotag -l "$1" | grep ':')
  )

  # flac reports tracknumber vs tracknum
  [[ -n "$tracknumber" ]] && tracknum="$tracknumber"

  # check the global vars, lacking just one returns a failure status
  [[ -z "$tracknum" ]] && return 1
  [[ -z "$artist"   ]] && return 1
  [[ -z "$album"    ]] && return 1
  [[ -z "$title"    ]] && return 1

  return 0
}

# take a random dir full of files and read their tags, create
# folders/files in the proper structure under ./sorted based on these
# tags
process_dir() {
  local dir="$1" sdir ext dest good

  [[ -d "$dir" ]] || errorout "$1: not a directory"

  good=false
  while read -r file; do 
    if ! fill_vars_at "$file"; then
        warn "$file: tag not read"
        continue
    fi

    # keep the extension
    ext="${file##*.}"

    # ./mprocess-sorted/artist/album/n_track.ext
    dest="$sort/${artist// /_}/${album// /_}/${tracknum%%/*}_${title// /_}.$ext"
    sdir="$(dirname "$dest")"

    [[ -d "$sdir" ]] || mkdir -p "$sdir"

    cp "$file" "$dest" || errorout "$dest: failed to copy"

    echo "created $dest."
    good=true
  done < <(find "$dir" -type f -print)

  # as a convenience, only mv to originals if something was sorted
  $good && mv "$dir" "$orig/" || return 1
}

# take stock of the current tree under ./mprocess-sorted and move
# folders to ~/Music properly
move_to_music() {
  local artist_path album_path artist album

  while read -r artist_path; do
    while read -r album_path; do
      artist="$(basename "$artist_path")"
      album="$(basename "$album_path")"

      # subsequent albums may be already moved if
      # the artist was entirely new
      [[ ! -d "$album_path" ]] && continue

      if [[ -d "$mdir/$artist/$album" ]]; then
        # don't fill exising albums
        warn "$mdir/$artist/$album: directory exists"
      elif [[ -d "$mdir/$artist" ]]; then
        # copy album to existing artist
        echo "moving $album to $mdir/$artist/..."
        mv "$album_path" "$mdir/$artist/" || return 1
      else
        # copy new artist in
        echo "moving $artist to $mdir/..."
        mv "$artist_path" "$mdir/" || return 1
      fi

    done < <(find "$artist_path" -depth -mindepth 1 -maxdepth 1 -type d -print)
  done < <(find "$sort" -depth -mindepth 1 -maxdepth 1 -type d -print)

  return 0
}

# audiotag does most of the work
which audiotag &>/dev/null || errorout 'audiotag required'

# final music location
mdir="$HOME/Music"

# sorted files go here
sort='./mprocess-sorted'

# originals go here (untouched)
orig='./mprocess-originals'

[[ -d "$sort" ]] || mkdir -p "$sort"
[[ -d "$orig" ]] || mkdir -p "$orig"

good=false
for dir in "$@"; do
  process_dir "$dir" && good=true
done

# if nothing happened then just cleanup and quit
if ! $good; then
  echo 'nothing processed successfully, cleaning up...'
  rm -r "$sort" "$orig"
  exit 1
fi

# show what was done:
echo; tree "$sort"; echo

# some optional post-sort actions
if prompt "merge $sort into $mdir"; then
  move_to_music && rm -r "$sort" || errorout 'failed to move to music'
fi

prompt "remove $orig" && rm -r "$orig"
prompt 'update mpd db' && mpc --wait update
